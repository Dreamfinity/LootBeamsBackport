buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name 'Curseforge Maven'
            url 'https://minecraft.curseforge.com/api/maven/'
        }
        maven {
            url 'https://cloudrep.veritaris.me/repos'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: "java"


group 'com.dreamfinity.' + {rootProject.name}
version project.version

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "run"
    replace("@version@": project.version)
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

runClient {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

repositories {
    maven {
        url 'https://cloudrep.veritaris.me/repos'
    }
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-core:2.13.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.13.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version,
                "mcversion": project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}


// Semantic versioning

task JustBuild(type: WriteProperties) {
    outputFile = file("gradle.properties");
    project.buildVersion = Integer.parseInt(project.buildVersion) + 1;
    property 'buildVersion', project.buildVersion;
    property 'version', makeVersion(project.version, false, false, false);
}

task Patch(type: WriteProperties) {
    outputFile = file("gradle.properties");
    def newVersion = makeVersion(project.version, false, false, true);
    property 'buildVersion', 0;
    property 'version', newVersion;
}

task Minor(type: WriteProperties) {
    outputFile = file("gradle.properties");
    def newVersion = makeVersion(project.version, false, true, false);
    property 'buildVersion', 0;
    property 'version', newVersion;
}

task Major(type: WriteProperties) {
    outputFile = file("gradle.properties");
    def newVersion = makeVersion(project.version, true, false, false);
    property 'buildVersion', 0;
    property 'version', newVersion;
}

Major.finalizedBy('build');
Minor.finalizedBy('build');
Patch.finalizedBy('build');
JustBuild.finalizedBy('build');

def makeVersion(prevVersion, isMajorRelease, isMinorRelease, isPatch) {
    def (major, minor, patch) = prevVersion.tokenize('.');
    patch = patch.split("-")[0];
    def newVersion;

    if (isMajorRelease) {
        newVersion = "${Integer.parseInt(major) + 1}.$minor.$patch";
    } else if (isMinorRelease) {
        newVersion = "$major.${Integer.parseInt(minor) + 1}.$patch";
    } else if (isPatch) {
        newVersion = "$major.$minor.${Integer.parseInt(patch) + 1}";
    } else {
        newVersion = "$major.$minor.$patch-build-$project.buildVersion";
    }

    if (isMajorRelease || isMinorRelease || isPatch) {
        println("Migrating from $prevVersion to $newVersion");
    }
    return newVersion;
}

configure(Major) {
    group = "Semantic versioned";
    description = "Builds .jar increasing major number: major.y.z"
}
configure(Minor) {
    group = "Semantic versioned";
    description = "Builds .jar increasing minor number: x.minor.y"
}
configure(Patch) {
    group = "Semantic versioned";
    description = "Builds .jar increasing patch number: x.y.patch"
}
configure(JustBuild) {
    group = "Semantic versioned";
    description = "Builds .jar adding '-build-N' suffix and increasing build number: x.y.z-build-N"
}
